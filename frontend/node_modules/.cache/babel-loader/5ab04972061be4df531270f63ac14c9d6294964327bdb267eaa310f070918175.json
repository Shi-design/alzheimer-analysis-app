{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shiva\\\\OneDrive\\\\alzheimer-analysis-app\\\\frontend\\\\src\\\\pages\\\\UploadPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UploadPage = () => {\n  _s();\n  const [mriFile, setMriFile] = useState(null);\n  const [status, setStatus] = useState('');\n  const location = useLocation();\n  const navigate = useNavigate();\n  const {\n    personalDetails,\n    quizScore\n  } = location.state || {};\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!mriFile) {\n      alert('Please upload an MRI scan.');\n      return;\n    }\n    setStatus('Analyzing...');\n\n    // In a real app, you would use FormData to send the file.\n    // const formData = new FormData();\n    // formData.append('mriScan', mriFile);\n    // formData.append('quizScore', quizScore);\n    // formData.append('personalDetails', JSON.stringify(personalDetails));\n\n    try {\n      // Since the backend file handling isn't built yet, we'll send the score to the mock endpoint.\n      const res = await axios.post('http://localhost:5000/api/analysis/submit', {\n        quizScore\n      });\n      navigate('/results', {\n        state: {\n          results: res.data.results\n        }\n      });\n    } catch (err) {\n      setStatus('Analysis failed. Please try again.');\n      console.error(err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Upload Medical Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your quiz score is: \", quizScore || 'N/A']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Upload MRI Scan:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          onChange: e => setMriFile(e.target.files[0]),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Voice Recording (Feature coming soon):\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          disabled: true,\n          children: \"Start Recording\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Get Analysis Results\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), status && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(UploadPage, \"q3c6S8VYa6nPKloCJr3nWyUQh10=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = UploadPage;\nexport default UploadPage;\nvar _c;\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"names":["React","useState","useLocation","useNavigate","axios","jsxDEV","_jsxDEV","UploadPage","_s","mriFile","setMriFile","status","setStatus","location","navigate","personalDetails","quizScore","state","handleSubmit","e","preventDefault","alert","res","post","results","data","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","files","required","disabled","_c","$RefreshReg$"],"sources":["C:/Users/shiva/OneDrive/alzheimer-analysis-app/frontend/src/pages/UploadPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nconst UploadPage = () => {\r\n  const [mriFile, setMriFile] = useState(null);\r\n  const [status, setStatus] = useState('');\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  const { personalDetails, quizScore } = location.state || {};\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!mriFile) {\r\n      alert('Please upload an MRI scan.');\r\n      return;\r\n    }\r\n    setStatus('Analyzing...');\r\n    \r\n    // In a real app, you would use FormData to send the file.\r\n    // const formData = new FormData();\r\n    // formData.append('mriScan', mriFile);\r\n    // formData.append('quizScore', quizScore);\r\n    // formData.append('personalDetails', JSON.stringify(personalDetails));\r\n    \r\n    try {\r\n      // Since the backend file handling isn't built yet, we'll send the score to the mock endpoint.\r\n      const res = await axios.post('http://localhost:5000/api/analysis/submit', { quizScore });\r\n      navigate('/results', { state: { results: res.data.results } });\r\n    } catch (err) {\r\n      setStatus('Analysis failed. Please try again.');\r\n      console.error(err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Upload Medical Data</h2>\r\n      <p>Your quiz score is: {quizScore || 'N/A'}</p>\r\n      <form onSubmit={handleSubmit}>\r\n        <div>\r\n          <label>Upload MRI Scan:</label>\r\n          <input type=\"file\" onChange={(e) => setMriFile(e.target.files[0])} required />\r\n        </div>\r\n        <div>\r\n          <label>Voice Recording (Feature coming soon):</label>\r\n          <button type=\"button\" disabled>Start Recording</button>\r\n        </div>\r\n        <button type=\"submit\">Get Analysis Results</button>\r\n        {status && <p>{status}</p>}\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UploadPage;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}